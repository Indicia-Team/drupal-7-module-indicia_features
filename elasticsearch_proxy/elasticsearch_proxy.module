<?php

/**
 * Implements hook_permission().
 *
 * Sets up an end-point for the proxy.
 */
function elasticsearch_proxy_permission() {
  return [
    'access elasticsearch proxy' => [
      'title' => t('Access Elasticsearch proxy'),
    ],
    'access elasticsearch proxy restricted' => [
      'title' => t('Access Elasticsearch proxy restricted access reports'),
    ],
  ];
}

/**
 * Implement hook_variable_info().
 */
function elasticsearch_proxy_variable_info($options) {
  $variable['iform_elasticsearch_url']=array(
    'title' => t('Elasticsearch URL'),
    'description' => t('URL to the Elasticsearch instance.'),
    'type' => 'string',
    'default' => '',
    'addToIndiciaSettingsPage' => TRUE,
  );
  return $variable;
}

/**
 * Implements hook_menu().
 *
 * Exposes a form that can resolve the case when there are several possible
 * users that this account can be linked to on the warehouse.
 */
function elasticsearch_proxy_menu() {
  $items['elasticsearch_proxy'] = array(
    'page callback' => 'elasticsearch_proxy_callback',
    'access arguments' => array('access elasticsearch proxy'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function elasticsearch_proxy_callback_fail($code, $status, $msg) {
  drupal_add_http_header('status', '$code $status' );
  drupal_add_http_header('Content-Type', 'application/json');
  echo json_encode([
    'code' => $code,
    'status' => $status,
    'message' => $msg,
  ]);
}

function elasticsearch_proxy_callback($report = NULL) {
  if ($report === NULL) {
    elasticsearch_proxy_callback_fail(400, 'Bad request', 'Incorrect call - report required in URL segment');
    return;
  }
  $elasticUrl = variable_get('iform_elasticsearch_url');
  if (!$elasticUrl) {
    elasticsearch_proxy_callback_fail(500, 'Internal server error',
      'Elasticsearch URL not configured on Indicia settings page.');
    return;
  }
  // Ensure file extension.
  if (!preg_match('/\.json/', $report)) {
    $report .= '.json';
  }
  $report = dirname(__FILE__) . "/config/$report";
  if (!file_exists($report)) {
    elasticsearch_proxy_callback_fail(400, 'Bad request', "Incorrect call - report $report not found");
    return;
  }
  $content = file_get_contents($report);
  $indiciaUserId = hostsite_get_user_field('indicia_user_id');
  $content = str_replace('{{ indicia_user_id }}', $indiciaUserId, $content);
  $config = json_decode($content, TRUE);
  if (empty($config['access'])) {
    elasticsearch_proxy_callback_fail(500, 'Internal server error', 'Invalid report yaml - access setting missing');
    return;
  }
  if (!in_array($config['access'], ['anon', 'user', 'restricted'])) {
    elasticsearch_proxy_callback_fail(500, 'Internal server error', 'Invalid report yaml - invalid access setting');
    return;
  }
  if ($config['access'] !== 'anon' && empty($indiciaUserId)) {
    elasticsearch_proxy_callback_fail(401, 'Unauthorised', 'You must be logged in and linked to the warehouse to access this report.');
    return;
  }
  if ($config['access'] === 'restricted' && !user_has_permission('access elasticsearch proxy restricted')) {
    elasticsearch_proxy_callback_fail(403, 'Forbidden', 'Report access restricted.');
    return;
  }
  $postData = json_decode($config['request']);
  $session = curl_init("$elasticUrl/api/console/proxy?path=_search&method=POST");
  curl_setopt($session, CURLOPT_HEADER, true);
  curl_setopt($session, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($session, CURLOPT_REFERER, $_SERVER['HTTP_HOST']);
  $response = curl_exec($session);
  echo $response;
}
