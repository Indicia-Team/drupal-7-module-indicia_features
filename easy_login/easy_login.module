<?php

/**
 * @file
 * Code for the Easy Login feature.
 */

include_once 'easy_login.features.inc';

/**
 * Implements hook_menu().
 *
 * Exposes a form that can resolve the case when there are several possible
 * users that this account can be linked to on the warehouse.
 */
function easy_login_menu() {
  $items['resolve_multiple_users'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments'   => array('resolve_multiple_users_form'),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    // Anyone logged in.
    'access arguments' => array('post comments'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function easy_login_permission() {
  return array(
    'collate regional records' => array(
      'title' => t('Access and collate records from a region'),
    ),
  );
}

function resolve_multiple_users_form() {
  $userList = $_SESSION['multiple_users_to_resolve'];
  drupal_set_message(t('There appear to be several existing users on the central records database which may or may not be yours. They are users of the ' .
        'following websites. Please tick the ones which you agree you have been a user of then press Save.'));
  $websites = array();
  foreach ($userList as $user) {
    if ($user->website_id !== variable_get('indicia_website_id', 0))
      $websites[$user->website_id] = $user->title;
  }
  $form['website_list'] = array(
    '#type' => 'fieldset',
    '#title' => t('List of websites you might be a user of:'),
  );
  $form['website_list']['websites'] = array(
    '#type' => 'checkboxes',
    '#options' => $websites,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

function resolve_multiple_users_form_submit($form, &$form_state) {
  $userList = $_SESSION['multiple_users_to_resolve'];
  $listToMerge = array();
  $tickedWebsites = array();
  foreach ($form_state['values']['websites'] as $website_id => $ticked) {
    if ($ticked !== 0) {
      $tickedWebsites[] = $website_id;
    }
  }
  foreach ($userList as $user) {
    if ($user->website_id === variable_get('indicia_website_id', 0) || in_array($user->website_id, $tickedWebsites)) {
      $listToMerge[] = $user->user_id;
    }
  }
  $user = user_load($_SESSION['uid_to_resolve']);
  $response = easy_login_call_get_user_id($user, 'merge', $listToMerge);
  easy_login_handle_get_user_id_response($user, $response);
  drupal_goto("user/$user->uid/edit");
}

/**
 * Implements hook_user_view().
 *
 * Tidies up the view tab of a user account.
 *
 * @throws \exception
 */
function easy_login_user_view($account) {
  iform_load_helpers(array('data_entry_helper'));
  $readAuth = data_entry_helper::get_read_auth(variable_get('indicia_website_id', ''), variable_get('indicia_password', ''));
  _easy_login_set_view_account_for_table('location', 'name', $account, 'field_location', $readAuth,
      'Recording preferences', 'Your preferred locality for recording is !items.');
  if (user_access('verification', $account)) {
    _easy_login_set_view_account_for_table('location', 'name', $account, 'field_location_expertise', $readAuth,
        'Verification settings', 'Your locality for verification is !items.');
  }
  else {
    unset($account->content['field_location_expertise']);
  }
  if (user_access('collate regional records', $account)) {
    _easy_login_set_view_account_for_table('location', 'name', $account, 'field_location_collation', $readAuth,
        'Data collation settings', 'Your locality for data collation downloads is !items.');
  }
  else {
    unset($account->content['field_location_collation']);
  }
  _easy_login_set_view_account_for_table('taxon_group', 'title', $account, 'field_taxon_groups', $readAuth,
      'Recording preferences', 'Your preferred species groups for recording are !items.');
  if (user_access('verification', $account)) {
    _easy_login_set_view_account_for_table('taxon_group', 'title', $account, 'field_taxon_groups_expertise', $readAuth,
        'Verification settings', 'Your species groups for verification are !items.');
    _easy_login_set_view_account_for_table('survey', 'title', $account, 'field_surveys_expertise', $readAuth,
        'Verification settings', 'Your surveys for verification are !items.');
  }
  else {
    unset($account->content['field_taxon_groups_expertise']);
    unset($account->content['field_surveys_expertise']);
  }
  if (isset($account->content['field_record_privacy'])) {
    // Convert a boolean to something more readable.
    $account->content['field_record_privacy']['#title'] = t('Record privacy');
    $account->content['field_record_privacy']['#markup'] = t(
        'You have opted not to share your records with other websites.');
  }
  if (!user_access('administer users')) {
    unset($account->content['field_indicia_user_id']);
  }
  _show_user_species_alerts($account, $readAuth);
}

function easy_login_user_login(&$edit, $account) {
  if (empty($account->field_last_name)) {
    drupal_set_message('Please set at least your last name on your ' . l('user account', "user/$account->uid/edit") .
        '. This will allow your user registration to be linked properly to the central database of records.');
    return;
  }
  elseif ($account->access !== 0 && !empty($account->field_indicia_user_id)) {
    // If not first login and we know our indicia user ID, then there is
    // nothing more to do.
    return;
  }
  else {
    // If we've logged in before but don't have a warehouse user ID, then it
    // means Easy Login was installed since we last logged in. So there might
    // be existing records to move into our user account.
    $needToProcessExistingRecords = ($account->access !== 0) && empty($account->field_indicia_user_id);
    easy_login_synchronise_account_to_warehouse($edit, $account, $needToProcessExistingRecords);
  }
}

function easy_login_synchronise_account_to_warehouse(&$edit, $account, $needToProcessExistingRecords) {
  $fieldsToSyncByCaption = array();
  global $user;
  $existingUser = user_load($account->uid);
  // $edit can be empty during initial registration.
  if (!empty($edit)) {
    $fieldsToSync = array();
    foreach ($edit as $field => $def) {
      if (preg_match('/^field_indicia_/', $field) && $field !== 'field_indicia_user_id') {
        // Check for empty as field without value will have empty
        // $def[LANGUAGE_NONE][0]['value'].
        if (!empty($def[LANGUAGE_NONE][0]['value'])) {
          $value = $def[LANGUAGE_NONE][0]['value'];
        }
        else {
          $value = '';
        }
        // Fields that are available for synchronisation must be called
        // field_indicia_*. We also don't want to handle anything that has not
        // actually changed.
        $userField = $existingUser->$field;
        // Note: there used to be an if statement around this field to make sure it was previously empty or had changed before doing a sync.
        // This does not work in the situation where a user registers and is then activated, as the first sync should occur at activation
        // when actually a field might of been filled at registration and won't have changed.
        $fieldsToSync[$field] = $value;
      }
    }

    if (count($fieldsToSync)) {
      // Indicia requires fields to match on the caption, so we need to query
      // the captions and convert the array.
      $r = db_query("select data, field_name from {field_config_instance} where field_name in (:ids) and entity_type='user'",
          array(':ids' => array_keys($fieldsToSync)));
      foreach ($r as $row) {
        $blob = unserialize($row->data);
        $fieldsToSyncByCaption[$blob['label']] = $fieldsToSync[$row->field_name];
      }
    }
    if ($account->uid === $user->uid) {
      // If the user has not filled in preferences then prompt them. Allow for the fact that the site administrator might have
      // hidden these fields if they feel they are not relevant to the site.
      $requests = array();
      // $account->field_taxon_groups etc contains something if the field exist
      if (isset($account->field_location) && empty($edit['field_location'][LANGUAGE_NONE]))
        $requests[] = t('the area you would most often like to record in');
      if (isset($account->field_taxon_groups) && empty($edit['field_taxon_groups'][LANGUAGE_NONE]))
        $requests[] = t('the list of species groups you are particularly interested in');
      if (!empty($requests))
        drupal_set_message(t('Why not tell us !requests to help us tailor the system to your needs? '.
            'You can fill this information in on your !link.',
            array(
              '!requests'=>implode(' '.t('and').' ', $requests),
              '!link'=>l('user preferences', 'user/'.$account->uid.'/edit')
            )
        ));
    }
  }
  easy_login_move_form_data_into_account($edit, $account);
  $response=easy_login_call_get_user_id($account, null, null, $fieldsToSyncByCaption, $needToProcessExistingRecords);
  easy_login_handle_get_user_id_response($account, $response);
}

/**
 * Overwrites the content of the account object with any updates from the posted form. Does not save to the db.
 * @param array $edit Form edit data
 * @param array $account User account
 */
function easy_login_move_form_data_into_account($edit, &$account) {
  foreach ($edit as $key=>$data) {
    if (substr($key, 0, 6)==='field_')
      $account->$key=$data;
  }
}

/**
 * Implements hook_user_insert. Synchronises user fields to matching custom attributes on the
 * Indicia warehouse, if the user is created as active.
 * @param array $edit Form edit data
 * @param array $account User account
 */
function easy_login_user_insert(&$edit, $account) {
  if($account->status) {
    easy_login_synchronise_account_to_warehouse($edit, $account, false);
  }
}

/**
 * Implements hook_user_update. Synchronises user fields to matching custom attributes on the
 * Indicia warehouse.
 * @param array $edit Form edit data
 * @param array $account User account
 * @param $category
 */
function easy_login_user_update(&$edit, $account) {
  easy_login_synchronise_account_to_warehouse($edit, $account, false);
}

/**
 * Converts the information on the account's View page to show a list of species groups or locations
 * rather than the taxon_group_ids or location IDs.
 */
function _easy_login_set_view_account_for_table($table, $titleField, &$account, $userField, $readAuth, $title, $description) {
  if (!empty($account->$userField)) {
    $itemList = _easy_login_get_user_field_as_list($table, $account, $userField, $titleField, $readAuth);
    $section = str_replace(' ', '', $title);
    if (!isset($account->content[$section]))
      $account->content[$section]=array(
        '#type' => 'user_profile_category',
        '#title' => t($title),
        '#weight' => 1
      );

    $account->content[$section][$userField] = array(
        '#markup'=>t($description, array('!items'=>$itemList)).'<br/>',
        '#title'=>'',
        '#type'=>'markup'
    );
    unset($account->content[$userField]);
  }
}

/**
 * Adds a user's species alert subscriptions to the view page of their user account
 * @param $account
 * @param $readAuth
 */
function _show_user_species_alerts($account, $readAuth) {
  $list = _easy_login_get_alerts($readAuth, hostsite_get_user_field('indicia_user_id', 0, false, $account->uid));
  if (count($list)) {
    $markup = '<ul><li>' . implode('</li><li>', $list) . '</li></ul>';
    $account->content['Species alerts'] = array(
      '#type' => 'user_profile_category',
      '#title' => t('Species alerts'),
      '#weight' => 50
    );
    $account->content['Species alerts']['alerts'] = array(
      '#markup' => $markup,
      '#title' => '',
      '#type' => 'markup'
    );
  }
}

/**
 * Retrieve the user's species alert subscriptions from othw warehouse.
 * @param $readAuth
 * @param $indicia_user_id
 * @return array
 */
function _easy_login_get_alerts($readAuth, $indicia_user_id) {
  // Don't run function if the current user is not the same as the account page being displayed.
  // This avoids a security error message (although it will stop the alerts showing for administrators
  // viewing other profiles)
  if ($indicia_user_id !== hostsite_get_user_field('indicia_user_id')) {
    return array();
  }
  if (!$indicia_user_id)
    // user not linked to warehouse
    return array();
  try {
    $alerts = data_entry_helper::get_population_data(array(
      'table' => 'species_alert',
      'extraParams' => $readAuth + array(
          'view' => 'detail',
          'user_id' => $indicia_user_id
        ),
      'caching' => FALSE
    ));
  } catch (Exception $e) {
    // most likely because the species_alerts module is not enabled on the warehouse, so we can ignore them
    return array();
  }
  if(array_key_exists('error', $alerts)) {
    // Most likely because the species_alerts module is not enabled on the
    // warehouse, so we can ignore alerts. However, you can still expect a nasty
    // looking error because http_post gets an internal server error 500 from
    // the warehouse which is echoed to the output.
    return array();
  }
  $list = array();
  if (count($alerts)) {
    foreach ($alerts as $alert) {
      if ($alert['alert_on_entry'] === 't' & $alert['alert_on_verify'] === 't') {
        $action = 'entry or verification as correct';
      }
      elseif ($alert['alert_on_entry'] === 't') {
        $action = 'entry';
      }
      elseif ($alert['alert_on_verify'] === 't') {
        $action = 'verification as correct';
      }
      else {
        // skip this notification as it doesn't do anything
        continue;
      }
      $what = '';
      if (!empty($alert['taxon_list_title'])) {
        $what = t('a species in the @list', array('@list' => $alert['taxon_list_title']));
      }
      elseif (!empty($alert['preferred_taxon'])) {
        $what = "<em>$alert[preferred_taxon]</em>";
        if (!empty($alert['default_common_name'])) {
          $what .= " ($alert[default_common_name])";
        }
      }
      if (!empty($alert['location_name'])) {
        if (empty($what)) {
          $what = t('record');
        }
        else {
          $what = "<strong>$what</strong>";
        }
        $what .= t(' at site !site', array('!site' => "<strong>$alert[location_name]</strong>"));
      }
      $list[$alert['id']] = t('Notified on @action of !what', array(
        '@action' => $action,
        '!what' => $what
      ));
    }
  }
  return $list;
}

/**
 * Alter the account form to load possible options for location and taxon group from the warehouse.
 */
function easy_login_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id === 'user_profile_form') {
    // might be viewing for another user, so dig out the user ID.
    $args = $form_state['build_info']['args'][0];
    global $user;
    $thisUser = user_load($args->uid);

    iform_load_helpers(array('data_entry_helper'));
    $readAuth = data_entry_helper::get_read_auth(variable_get('indicia_website_id', ''), variable_get('indicia_password', ''));
    if (isset($form['field_location']))
      $lang = $form['field_location']['#language'];
    else
      $lang = LANGUAGE_NONE; // default undefined
    // Hide warehouse link and remembered field mappings unless admin
    if (!user_access('administer users')) {
      unset($form['field_indicia_user_id']);
      unset($form['field_import_field_mappings']);
    }
    // The fields can be hidden for sites that don't want them, so check they exist on the form.
    if (isset($form['field_location']) || isset($form['field_location_expertise'])) {
      $locations = easy_login_get_locations($readAuth, 'indicia_profile_location_type_id');
      if (isset($form['field_location'])) {
        $form['field_location'][$lang]['#options'] = $locations;
        // as it is a dynamic list of options, we need to reset the current value
        $form['field_location'][$lang]['#default_value'] = hostsite_get_user_field('location', false, false, $thisUser->uid);
      }
      if ($form_id === 'user_profile_form' && isset($form['field_location_expertise'])) {
        $form['field_location_expertise'][$lang]['#options'] = $locations;
        // as it is a dynamic list of options, we need to reset the current value
        $form['field_location_expertise'][$lang]['#default_value'] = hostsite_get_user_field('location_expertise', false, false, $thisUser->uid);
      }
    }
    if (isset($form['field_location_collation'])) {
      $locations = easy_login_get_locations($readAuth, 'indicia_profile_collation_location_type_id');
      $form['field_location_collation'][$lang]['#options'] = $locations;
      // as it is a dynamic list of options, we need to reset the current value
      $form['field_location_collation'][$lang]['#default_value'] = hostsite_get_user_field('location_collation', false, false, $thisUser->uid);
    }
    if (isset($form['field_taxon_groups']) || isset($form['field_taxon_groups_expertise'])) {
      // Load the list of taxon groups. If we have a master list setting for the site, use this to ensure we only pick up
      // groups that are in use on the site.
      $response = data_entry_helper::get_population_data(array(
        'report' => 'library/taxon_groups/taxon_groups_used_in_checklist',
        'extraParams' => $readAuth + array('taxon_list_id'=>variable_get('iform_master_checklist_id', ''))
      ));
      $groups=array();
      foreach ($response as $group) {
        $groups[$group['id']]=$group['title'];
      }
      if (isset($form['field_taxon_groups'])) {
        $form['field_taxon_groups'][$lang]['#options'] = $groups;
        $form['field_taxon_groups']['#prefix'] = '<div class="inline-checkboxes taxon-groups">';
        $form['field_taxon_groups']['#suffix'] = '</div>';
        $val = hostsite_get_user_field('taxon_groups', false, true, $thisUser->uid);
        if (!empty($val))
          $form['field_taxon_groups'][$lang]['#default_value'] = $val;
      }
      if ($form_id === 'user_profile_form' && isset($form['field_taxon_groups_expertise'])) {
        $form['field_taxon_groups_expertise'][$lang]['#options'] = $groups;
        $form['field_taxon_groups_expertise']['#prefix'] = '<div class="inline-checkboxes taxon-groups">';
        $form['field_taxon_groups_expertise']['#suffix'] = '</div>';
        $val = hostsite_get_user_field('taxon_groups_expertise', false, true, $thisUser->uid);
        if (!empty($val))
          $form['field_taxon_groups_expertise'][$lang]['#default_value'] = $val;
      }
    }
    if ($form_id === 'user_profile_form' && isset($form['field_surveys_expertise']) && user_access('administer users')) {
      $surveys = hostsite_get_user_field('field_surveys_expertise', array(), true, $thisUser->uid);
      if (count($surveys)) {
        $qry = json_encode(array('in'=>array('id', array_values($surveys))));
        $result = data_entry_helper::get_population_data(array(
          'table' => 'survey',
          'extraParams'=>$readAuth + array('query'=>$qry, 'sharing'=>'verification')
        ));
        // convert result array to correct format for sub_list control
        $surveys = array();
        foreach($result as $row)
          $surveys[] = array(
              'caption' => $row['title'],
              'default' => $row['id'],
              'fieldname' => 'field_surveys_expertise[]'
          );
      }
      $form['field_surveys_expertise'][$lang] = array(
        '#markup' => data_entry_helper::sub_list(array(
          'label' => $form['field_surveys_expertise'][$lang]['#title'],
          'fieldname'=>'field_surveys_expertise',
          'table'=>'survey',
          'valueField'=>'id',
          'captionField'=>'title',
          'addToTable' => false,
          'extraParams' => $readAuth + array('sharing'=>'verification'),
          'default'=>$surveys,
          'class'=>'control-width-5',
          'helpText' => $form['field_surveys_expertise'][$lang]['#description']
        )),
        '#type'=>'markup'
      );
    }
    // If the user is a verifier but the person editing the account has no rights to change the settings, then add read only descriptions
    // of verification settings. We'll remove the actual fields in a moment.
    if (user_access('verification', $thisUser) && !user_access('administer users')) {
      $verification_info =  array();
      $verification_info[] = t('Your locality for verification: !items.',
          array('!items' => _easy_login_get_user_field_as_list('location', $user, 'field_location_expertise', 'name', $readAuth)));
      $verification_info[] = t('Your taxon groups for verification: !items.',
          array('!items' => _easy_login_get_user_field_as_list('taxon_group', $user, 'field_taxon_groups_expertise', 'title', $readAuth)));
      $verification_info[] = t('Your surveys for verification: !items.',
          array('!items' => _easy_login_get_user_field_as_list('survey', $user, 'field_surveys_expertise', 'title', $readAuth)));
      $form['verification_info'] = array(
        '#markup' => '<div class="form-item"><label>' . t('Verification settings') . '</label><ul><li>' .
          implode("</li>\n<li>", $verification_info) . '</li></ul>' .
          '<div class="description">' . t('If you want to change any of these settings, please contact the website administrator.') . '</div></div>',
      );
      $form['#group_children']['verification_info'] = 'group_verification';
    }
    if (user_access('collate regional records', $thisUser) && !user_access('administer users')) {
      $form['collation_info'] = array(
        '#markup' => '<div class="form-item"><label>' . t('Record collation settings') . '</label><ul><li>' .
          t('Your locality for collation: !items.',
          array('!items' => _easy_login_get_user_field_as_list('location', $user, 'field_location_collation', 'name', $readAuth))) . '</ul></li>' .
          '<div class="description">' . t('If you want to change this setting, please contact the website administrator.') . '</div></div>'
      );
      if (isset($form['field_location_collation'])) {
        $form['field_location_collation']['#attributes'] = array('disabled' => 'true');
        $form['field_location_collation']['#description'] = t('If you want to change this setting, please contact the website administrator.');
      }
    }
    // If the user is not a verifier, or the person editing the account has no rights to change verification user settings, remove the fields.
    if (!user_access('verification', $thisUser) || !user_access('administer users')) {
      $form['field_location_expertise']['#access'] = FALSE;
      $form['field_taxon_groups_expertise']['#access'] = FALSE;
      $form['field_surveys_expertise']['#access'] = FALSE;
    }
    // Is the user being edited a regional collator? If not, no need for the profile field
    if (!user_access('collate regional records', $thisUser) || !user_access('administer users')) {
      $form['field_location_collation']['#access'] = FALSE;
    }
    if ($form_id === 'user_profile_form') {
      $alerts = _easy_login_get_alerts($readAuth, hostsite_get_user_field('indicia_user_id', 0, false, $thisUser->uid));
      if (count($alerts)) {
        // Add checkboxes to the user account edit page so the user can tick to delete the ones they don't want.
        /**
         * Following could be added to enable edit links, but would require a way of configuring the correct path
         * to a form for editing species alerts.
         *
        foreach ($alerts as $id => &$title) {
          $title .= " <a href=\"?q=node/..&id=$id\">edit</a>";
        }*/
        $form['species_alerts']=array(
          '#type' => 'fieldset',
          '#title' => t('Species alerts'),
          '#weight' => 50
        );
        $form['species_alerts']['alerts'] = array(
          '#type'=>'checkboxes',
          '#options' => $alerts,
          '#title' => t('Alerts you have subscribed to'),
          '#description' => t('If you want to unsubscribe from any of these alerts, then tick the box next to the alert ' .
              'before saving your user account.')
        );
      }
    }
    $form['#validate'][] = 'easy_login_submit_preferences';
    handle_resources();
  }
  if ($form_id === 'user_profile_form' || $form_id === 'user_register_form') {
    drupal_add_css(drupal_get_path('module','iform').'/media/css/default_site.css');
    drupal_add_js(drupal_get_path('module', 'easy_login').'/easy_login_form.js');
  }
}

/**
 * Loads the list of locations from which to select user's region.
 */
function easy_login_get_locations($readAuth, $typeVarName) {
  $locType = variable_get($typeVarName, '');
  if (!$locType) {
    // If variable not set, don't load all locations.
    return ['' => t('<No locations available>')];
  }
  $response = data_entry_helper::get_population_data(array(
    'table' => 'location',
    'extraParams' => $readAuth + [
      'orderby' => 'name',
      'sortdir' => 'ASC',
      'location_type_id' => $locType,
    ],
  ));
  $locations = ['' => t('<Please select>')];
  foreach ($response as $location) {
    $locations[$location['id']] = $location['name'];
  }
  return $locations;
}

/**
 * Handle additional tasks on submission of the user account form. Our sub_list control
 * does not automatically submit, so use the validate hook to reformat the sub_list data
 * into the correct format for Drupal to save it.
 * Also sync any requests to unsubscribe an email alert to the warehouse.
 */
function easy_login_submit_preferences($form, &$form_state) {
  if (isset($form_state['values']['field_u16']) && $form_state['values']['field_u16'][LANGUAGE_NONE][0]['value'] !== 0) {
    $dob = $form_state['values']['field_dob'][LANGUAGE_NONE][0]['value'];
    if (empty($dob)) {
      form_set_error('field_dob', t('Please provide your date of birth since you are under 16 years old.'));
    }
    else {
      $now = time();
      $inputDate = strtotime("$dob");
      if ($inputDate > $now) {
        form_set_error('field_dob', t('The date of birth has to be in the past.'));
      }
      elseif ($inputDate < strtotime('-16 years', $now)) {
        form_set_error('field_dob', t('You\'ve ticked the Under 16 box, but your birth date indicates you are over 16. Please correct.'));
      }
    }
  }
  else {
    // Don't save DOB if not under 16.
    $form_state['values']['field_dob'][LANGUAGE_NONE] = NULL;
  }
  if (isset($_POST['field_surveys_expertise'])) {
    $dataToSave=array();
    foreach($_POST['field_surveys_expertise'] as $value)
      $dataToSave[] = array('value'=>$value);
    $form_state['values']['field_surveys_expertise'][LANGUAGE_NONE]=$dataToSave;
  }
  else
    unset($form_state['values']['field_surveys_expertise']);
  if (!empty($_POST['alerts'])) {
    $auth = data_entry_helper::get_read_write_auth(variable_get('indicia_website_id', ''), variable_get('indicia_password', ''));
    // some species alert unsubscription requests have been posted. Let's remove them.
    $countDone = 0;
    foreach ($_POST['alerts'] as $idx => $id) {
      $s = data_entry_helper::build_submission(array(
        'website_id' => variable_get('indicia_website_id', ''),
        'species_alert:id' => $id,
        'species_alert:deleted' => 't'
      ), array('model' => 'species_alert'));
      $countDone++;
      $auth['write_tokens']['persist_auth'] = $countDone < count($_POST['alerts']);
      $r = data_entry_helper::forward_post_to('species_alert', $s, $auth['write_tokens']);
    }
  }
  //Save anonymous column in users_websites if a field called Anonymous is available (field_anonymous)
  if (isset($form_state['values']['field_anonymous'][LANGUAGE_NONE][0]['value'])) {
    $auth = data_entry_helper::get_read_write_auth(variable_get('indicia_website_id', ''), variable_get('indicia_password', ''));
    $existingUsersWebsiteId = data_entry_helper::get_population_data(array(
      'table'=>'users_website',
      'extraParams'=> $auth['read'] + array('website_id' => variable_get('indicia_website_id', ''),'user_id' => $form_state['values']['field_indicia_user_id'][LANGUAGE_NONE][0]['value']),
      'nocache' => true
    ));
    //Need to convert from 1/0 to true/false for saving
    if ($form_state['values']['field_anonymous'][LANGUAGE_NONE][0]['value']=='1') {
      $anonValueToSave='t';
    } else {
      $anonValueToSave='f';
    }
    $s = array(
      'id'=>'users_website',
      'fields'=>array(
        'website_id' => array('value'=>variable_get('indicia_website_id', '')),
        'user_id' => array('value'=>$form_state['values']['field_indicia_user_id'][LANGUAGE_NONE][0]['value']),
        'anonymous' => array('value'=>$anonValueToSave)
    ));
    //Need to use existing users_websites row where possible
    if ($existingUsersWebsiteId[0]['id'])
      $s['fields']['id']['value']=$existingUsersWebsiteId[0]['id'];
    $r = data_entry_helper::forward_post_to('users_website', $s, $auth['write_tokens']);
  }
}

/**
 * Converts the serialized list of IDs in a user field (list of locations or species groups) into
 * a comma separated list of readable item titles.
 */
function _easy_login_get_user_field_as_list($table, $account, $userField, $titleField, $readAuth) {
  $value = hostsite_get_user_field($userField, false, true, $account->uid);

  if (!$value)
    return '<strong>' . t('not specified') . '</strong>';
  else {
    // convert to a list of readable location or group titles
    $items = data_entry_helper::get_population_data(array(
      'table'=>$table,
      'extraParams'=>$readAuth + array('orderby'=>$titleField, 'sortdir'=>'ASC', 'sharing'=>'verification',
          'query'=>json_encode(array('in'=>array('id', $value)))
      )
    ));
    $itemList=array();
    foreach($items as $item)
      $itemList[]='<strong>'.$item[$titleField].'</strong>';
    return implode(', ', $itemList);
  }
}

/**
 * Function to call the get_user_id service on the warehouse.
 * @param object $account User account object
 * @param string $force Set to merge (to force a merge operation) or split (to force no merge).
 * @param array $users_to_merge If force is set to merge, but only some users must be merged,
 * pass an array of the user IDs.
 * @return string Response from call to get_user_id
 */
function easy_login_call_get_user_id($account, $force=null, $users_to_merge=null, $fieldsToSyncByCaption=array(), $needToProcessExistingRecords=false) {
  iform_load_helpers(array('data_entry_helper'));
  $url = data_entry_helper::$base_url.'index.php/services/user_identifier/get_user_id';
  $identifiers = array(array('type'=>'email','identifier'=>$account->mail));
  $identifiers = urlencode(json_encode($identifiers));
  $auth = data_entry_helper::get_read_write_auth(variable_get('indicia_website_id', ''), variable_get('indicia_password', ''));
  $url .= '?nonce='.$auth['write_tokens']['nonce'].'&auth_token='.$auth['write_tokens']['auth_token'];
  if ($needToProcessExistingRecords)
    $url .= '&cms_user_id='.$account->uid;
  $postargs = 'surname='.urlencode($account->field_last_name[LANGUAGE_NONE][0]['value']).'&identifiers='.$identifiers;
  if (!empty($account->field_indicia_user_id[LANGUAGE_NONE][0]['value']))
    $postargs .= '&warehouse_user_id=' . $account->field_indicia_user_id[LANGUAGE_NONE][0]['value'];
  if (count($fieldsToSyncByCaption))
    $postargs .= '&attribute_values='.urlencode(json_encode($fieldsToSyncByCaption));
  if (!empty($account->field_first_name[LANGUAGE_NONE][0]['value']))
    $postargs .= '&first_name='.urlencode($account->field_first_name[LANGUAGE_NONE][0]['value']);
  if ($force && ($force==='merge' || $force==='split')) {
    $postargs .= '&force='.$force;
    // We are definitely doing something on the server, so can inform the user.
    drupal_set_message(t('Your user information has been updated.'));
  }
  $postargs .= '&shares_to_prevent=';
  if (isset($account->field_record_privacy) && $account->field_record_privacy
      && $account->field_record_privacy[LANGUAGE_NONE][0]['value'] !== 0) {
    $postargs .= 'reporting,peer_review,verification,data_flow,moderation';
  }
  if ($users_to_merge) {
    $postargs .= '&user_to_merge=' . urlencode(json_encode($users_to_merge));
  }
  $response = data_entry_helper::http_post($url, $postargs);
  return $response['output'];
}

/**
 * Handle the response from a call to get_user_id on the warehouse services.
 * @param object $account User object to save to
 * @param string $response Response from call to get_user_id (should be a json string).
 */
function easy_login_handle_get_user_id_response($account, $response) {
  $response = json_decode($response);
  global $user;
  if (isset($response->userId)) {
    $isEmpty = empty($account->field_indicia_user_id) || empty($account->field_indicia_user_id[LANGUAGE_NONE]);
    if ($isEmpty || $account->field_indicia_user_id['und'][0]['value'] != $response->userId) {
      if ($account->uid === $user->uid) {
        // no need for these messages during registration
        if ($isEmpty)
          drupal_set_message(t('Your user account is now linked to the central records database.'));
        else
          drupal_set_message(t('Your user account link to the central records database has been updated.'));
      }
      $account->field_indicia_user_id[LANGUAGE_NONE][0]['value'] = $response->userId;
      $info = field_info_field('field_indicia_user_id');
      $fields = array($info['id']);
      //Execute the storage function
      field_sql_storage_field_storage_write('user', $account,  FIELD_STORAGE_UPDATE, $fields);
      // clear field cache
      cache_clear_all("field:user:$account->uid", 'cache_field');
    }
    /*
     * @todo: store values synched from the warehouse account
    if (isset($response->attrs)) {
      // got a list of profile attributes to update
      foreach($response->attrs as $caption => $value) {
        easy_login_store_value("title='$caption'", $account->uid, $value, $edit);
      }
    }*/
  } elseif (isset($response->possibleMatches)) {
    $_SESSION['multiple_users_to_resolve'] = $response->possibleMatches;
    $_SESSION['uid_to_resolve'] = $account->uid;
    drupal_goto('resolve_multiple_users');
  } elseif (isset($response->error))
    drupal_set_message($response->error, 'warning');
}

